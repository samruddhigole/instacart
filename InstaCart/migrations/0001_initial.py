# Generated by Django 3.2.25 on 2024-03-25 14:03

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('title', models.CharField(max_length=255)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('warranty', models.PositiveIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('image', models.CharField(blank=True, max_length=255)),
                ('SKU', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('catalog_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='InstaCart.catalog')),
            ],
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('contact', models.CharField(max_length=20)),
                ('address', models.TextField(blank=True)),
                ('password', models.CharField(max_length=255)),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('user_type_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='InstaCart.usertype')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('payment_mode', models.CharField(max_length=255)),
                ('ordered_date', models.DateTimeField(auto_now_add=True)),
                ('coupon_code', models.CharField(blank=True, max_length=255)),
                ('shipping_address', models.TextField(blank=True)),
                ('order_status', models.CharField(default='placed', max_length=255)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='InstaCart.user')),
            ],
        ),
        migrations.CreateModel(
            name='ProductsOrders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='InstaCart.order')),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='InstaCart.product')),
            ],
            options={
                'unique_together': {('order_id', 'product_id')},
            },
        ),
    ]
